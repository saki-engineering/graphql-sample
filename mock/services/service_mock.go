// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/saki-engineering/graphql-sample/graph/model"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// AddIssueInProjectV2 mocks base method.
func (m *MockServices) AddIssueInProjectV2(ctx context.Context, projectID, issueID string) (*model.ProjectV2Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIssueInProjectV2", ctx, projectID, issueID)
	ret0, _ := ret[0].(*model.ProjectV2Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddIssueInProjectV2 indicates an expected call of AddIssueInProjectV2.
func (mr *MockServicesMockRecorder) AddIssueInProjectV2(ctx, projectID, issueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIssueInProjectV2", reflect.TypeOf((*MockServices)(nil).AddIssueInProjectV2), ctx, projectID, issueID)
}

// AddPullRequestInProjectV2 mocks base method.
func (m *MockServices) AddPullRequestInProjectV2(ctx context.Context, projectID, pullRequestID string) (*model.ProjectV2Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPullRequestInProjectV2", ctx, projectID, pullRequestID)
	ret0, _ := ret[0].(*model.ProjectV2Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPullRequestInProjectV2 indicates an expected call of AddPullRequestInProjectV2.
func (mr *MockServicesMockRecorder) AddPullRequestInProjectV2(ctx, projectID, pullRequestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPullRequestInProjectV2", reflect.TypeOf((*MockServices)(nil).AddPullRequestInProjectV2), ctx, projectID, pullRequestID)
}

// GetIssueByID mocks base method.
func (m *MockServices) GetIssueByID(ctx context.Context, id string) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueByID", ctx, id)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueByID indicates an expected call of GetIssueByID.
func (mr *MockServicesMockRecorder) GetIssueByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueByID", reflect.TypeOf((*MockServices)(nil).GetIssueByID), ctx, id)
}

// GetIssueByRepoAndNumber mocks base method.
func (m *MockServices) GetIssueByRepoAndNumber(ctx context.Context, repoID string, number int) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueByRepoAndNumber", ctx, repoID, number)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueByRepoAndNumber indicates an expected call of GetIssueByRepoAndNumber.
func (mr *MockServicesMockRecorder) GetIssueByRepoAndNumber(ctx, repoID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueByRepoAndNumber", reflect.TypeOf((*MockServices)(nil).GetIssueByRepoAndNumber), ctx, repoID, number)
}

// GetProjectByID mocks base method.
func (m *MockServices) GetProjectByID(ctx context.Context, id string) (*model.ProjectV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", ctx, id)
	ret0, _ := ret[0].(*model.ProjectV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockServicesMockRecorder) GetProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockServices)(nil).GetProjectByID), ctx, id)
}

// GetProjectByOwnerAndNumber mocks base method.
func (m *MockServices) GetProjectByOwnerAndNumber(ctx context.Context, ownerID string, number int) (*model.ProjectV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByOwnerAndNumber", ctx, ownerID, number)
	ret0, _ := ret[0].(*model.ProjectV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByOwnerAndNumber indicates an expected call of GetProjectByOwnerAndNumber.
func (mr *MockServicesMockRecorder) GetProjectByOwnerAndNumber(ctx, ownerID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByOwnerAndNumber", reflect.TypeOf((*MockServices)(nil).GetProjectByOwnerAndNumber), ctx, ownerID, number)
}

// GetProjectItemByID mocks base method.
func (m *MockServices) GetProjectItemByID(ctx context.Context, id string) (*model.ProjectV2Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectItemByID", ctx, id)
	ret0, _ := ret[0].(*model.ProjectV2Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectItemByID indicates an expected call of GetProjectItemByID.
func (mr *MockServicesMockRecorder) GetProjectItemByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectItemByID", reflect.TypeOf((*MockServices)(nil).GetProjectItemByID), ctx, id)
}

// GetPullRequestByID mocks base method.
func (m *MockServices) GetPullRequestByID(ctx context.Context, id string) (*model.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestByID", ctx, id)
	ret0, _ := ret[0].(*model.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestByID indicates an expected call of GetPullRequestByID.
func (mr *MockServicesMockRecorder) GetPullRequestByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestByID", reflect.TypeOf((*MockServices)(nil).GetPullRequestByID), ctx, id)
}

// GetPullRequestByRepoAndNumber mocks base method.
func (m *MockServices) GetPullRequestByRepoAndNumber(ctx context.Context, repoID string, number int) (*model.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestByRepoAndNumber", ctx, repoID, number)
	ret0, _ := ret[0].(*model.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestByRepoAndNumber indicates an expected call of GetPullRequestByRepoAndNumber.
func (mr *MockServicesMockRecorder) GetPullRequestByRepoAndNumber(ctx, repoID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestByRepoAndNumber", reflect.TypeOf((*MockServices)(nil).GetPullRequestByRepoAndNumber), ctx, repoID, number)
}

// GetRepoByFullName mocks base method.
func (m *MockServices) GetRepoByFullName(ctx context.Context, owner, name string) (*model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByFullName", ctx, owner, name)
	ret0, _ := ret[0].(*model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByFullName indicates an expected call of GetRepoByFullName.
func (mr *MockServicesMockRecorder) GetRepoByFullName(ctx, owner, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByFullName", reflect.TypeOf((*MockServices)(nil).GetRepoByFullName), ctx, owner, name)
}

// GetRepoByID mocks base method.
func (m *MockServices) GetRepoByID(ctx context.Context, id string) (*model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByID", ctx, id)
	ret0, _ := ret[0].(*model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByID indicates an expected call of GetRepoByID.
func (mr *MockServicesMockRecorder) GetRepoByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByID", reflect.TypeOf((*MockServices)(nil).GetRepoByID), ctx, id)
}

// GetUserByID mocks base method.
func (m *MockServices) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServicesMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockServices)(nil).GetUserByID), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockServices) GetUserByName(ctx context.Context, name string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockServicesMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockServices)(nil).GetUserByName), ctx, name)
}

// ListIssueInRepository mocks base method.
func (m *MockServices) ListIssueInRepository(ctx context.Context, repoID string, after, before *string, first, last *int) (*model.IssueConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueInRepository", ctx, repoID, after, before, first, last)
	ret0, _ := ret[0].(*model.IssueConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueInRepository indicates an expected call of ListIssueInRepository.
func (mr *MockServicesMockRecorder) ListIssueInRepository(ctx, repoID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueInRepository", reflect.TypeOf((*MockServices)(nil).ListIssueInRepository), ctx, repoID, after, before, first, last)
}

// ListProjectByOwner mocks base method.
func (m *MockServices) ListProjectByOwner(ctx context.Context, ownerID string, after, before *string, first, last *int) (*model.ProjectV2Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectByOwner", ctx, ownerID, after, before, first, last)
	ret0, _ := ret[0].(*model.ProjectV2Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectByOwner indicates an expected call of ListProjectByOwner.
func (mr *MockServicesMockRecorder) ListProjectByOwner(ctx, ownerID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectByOwner", reflect.TypeOf((*MockServices)(nil).ListProjectByOwner), ctx, ownerID, after, before, first, last)
}

// ListProjectItemOwnedByIssue mocks base method.
func (m *MockServices) ListProjectItemOwnedByIssue(ctx context.Context, issueID string, after, before *string, first, last *int) (*model.ProjectV2ItemConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectItemOwnedByIssue", ctx, issueID, after, before, first, last)
	ret0, _ := ret[0].(*model.ProjectV2ItemConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectItemOwnedByIssue indicates an expected call of ListProjectItemOwnedByIssue.
func (mr *MockServicesMockRecorder) ListProjectItemOwnedByIssue(ctx, issueID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectItemOwnedByIssue", reflect.TypeOf((*MockServices)(nil).ListProjectItemOwnedByIssue), ctx, issueID, after, before, first, last)
}

// ListProjectItemOwnedByProject mocks base method.
func (m *MockServices) ListProjectItemOwnedByProject(ctx context.Context, projectID string, after, before *string, first, last *int) (*model.ProjectV2ItemConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectItemOwnedByProject", ctx, projectID, after, before, first, last)
	ret0, _ := ret[0].(*model.ProjectV2ItemConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectItemOwnedByProject indicates an expected call of ListProjectItemOwnedByProject.
func (mr *MockServicesMockRecorder) ListProjectItemOwnedByProject(ctx, projectID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectItemOwnedByProject", reflect.TypeOf((*MockServices)(nil).ListProjectItemOwnedByProject), ctx, projectID, after, before, first, last)
}

// ListProjectItemOwnedByPullRequest mocks base method.
func (m *MockServices) ListProjectItemOwnedByPullRequest(ctx context.Context, pullRequestID string, after, before *string, first, last *int) (*model.ProjectV2ItemConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectItemOwnedByPullRequest", ctx, pullRequestID, after, before, first, last)
	ret0, _ := ret[0].(*model.ProjectV2ItemConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectItemOwnedByPullRequest indicates an expected call of ListProjectItemOwnedByPullRequest.
func (mr *MockServicesMockRecorder) ListProjectItemOwnedByPullRequest(ctx, pullRequestID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectItemOwnedByPullRequest", reflect.TypeOf((*MockServices)(nil).ListProjectItemOwnedByPullRequest), ctx, pullRequestID, after, before, first, last)
}

// ListPullRequestInRepository mocks base method.
func (m *MockServices) ListPullRequestInRepository(ctx context.Context, repoID string, after, before *string, first, last *int) (*model.PullRequestConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestInRepository", ctx, repoID, after, before, first, last)
	ret0, _ := ret[0].(*model.PullRequestConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestInRepository indicates an expected call of ListPullRequestInRepository.
func (mr *MockServicesMockRecorder) ListPullRequestInRepository(ctx, repoID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestInRepository", reflect.TypeOf((*MockServices)(nil).ListPullRequestInRepository), ctx, repoID, after, before, first, last)
}

// ListUsersByID mocks base method.
func (m *MockServices) ListUsersByID(ctx context.Context, IDs []string) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByID", ctx, IDs)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByID indicates an expected call of ListUsersByID.
func (mr *MockServicesMockRecorder) ListUsersByID(ctx, IDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByID", reflect.TypeOf((*MockServices)(nil).ListUsersByID), ctx, IDs)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockUserService) GetUserByName(ctx context.Context, name string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserServiceMockRecorder) GetUserByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserService)(nil).GetUserByName), ctx, name)
}

// ListUsersByID mocks base method.
func (m *MockUserService) ListUsersByID(ctx context.Context, IDs []string) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByID", ctx, IDs)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByID indicates an expected call of ListUsersByID.
func (mr *MockUserServiceMockRecorder) ListUsersByID(ctx, IDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByID", reflect.TypeOf((*MockUserService)(nil).ListUsersByID), ctx, IDs)
}

// MockRepoService is a mock of RepoService interface.
type MockRepoService struct {
	ctrl     *gomock.Controller
	recorder *MockRepoServiceMockRecorder
}

// MockRepoServiceMockRecorder is the mock recorder for MockRepoService.
type MockRepoServiceMockRecorder struct {
	mock *MockRepoService
}

// NewMockRepoService creates a new mock instance.
func NewMockRepoService(ctrl *gomock.Controller) *MockRepoService {
	mock := &MockRepoService{ctrl: ctrl}
	mock.recorder = &MockRepoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoService) EXPECT() *MockRepoServiceMockRecorder {
	return m.recorder
}

// GetRepoByFullName mocks base method.
func (m *MockRepoService) GetRepoByFullName(ctx context.Context, owner, name string) (*model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByFullName", ctx, owner, name)
	ret0, _ := ret[0].(*model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByFullName indicates an expected call of GetRepoByFullName.
func (mr *MockRepoServiceMockRecorder) GetRepoByFullName(ctx, owner, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByFullName", reflect.TypeOf((*MockRepoService)(nil).GetRepoByFullName), ctx, owner, name)
}

// GetRepoByID mocks base method.
func (m *MockRepoService) GetRepoByID(ctx context.Context, id string) (*model.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByID", ctx, id)
	ret0, _ := ret[0].(*model.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByID indicates an expected call of GetRepoByID.
func (mr *MockRepoServiceMockRecorder) GetRepoByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByID", reflect.TypeOf((*MockRepoService)(nil).GetRepoByID), ctx, id)
}

// MockIssueService is a mock of IssueService interface.
type MockIssueService struct {
	ctrl     *gomock.Controller
	recorder *MockIssueServiceMockRecorder
}

// MockIssueServiceMockRecorder is the mock recorder for MockIssueService.
type MockIssueServiceMockRecorder struct {
	mock *MockIssueService
}

// NewMockIssueService creates a new mock instance.
func NewMockIssueService(ctrl *gomock.Controller) *MockIssueService {
	mock := &MockIssueService{ctrl: ctrl}
	mock.recorder = &MockIssueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueService) EXPECT() *MockIssueServiceMockRecorder {
	return m.recorder
}

// GetIssueByID mocks base method.
func (m *MockIssueService) GetIssueByID(ctx context.Context, id string) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueByID", ctx, id)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueByID indicates an expected call of GetIssueByID.
func (mr *MockIssueServiceMockRecorder) GetIssueByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueByID", reflect.TypeOf((*MockIssueService)(nil).GetIssueByID), ctx, id)
}

// GetIssueByRepoAndNumber mocks base method.
func (m *MockIssueService) GetIssueByRepoAndNumber(ctx context.Context, repoID string, number int) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueByRepoAndNumber", ctx, repoID, number)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueByRepoAndNumber indicates an expected call of GetIssueByRepoAndNumber.
func (mr *MockIssueServiceMockRecorder) GetIssueByRepoAndNumber(ctx, repoID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueByRepoAndNumber", reflect.TypeOf((*MockIssueService)(nil).GetIssueByRepoAndNumber), ctx, repoID, number)
}

// ListIssueInRepository mocks base method.
func (m *MockIssueService) ListIssueInRepository(ctx context.Context, repoID string, after, before *string, first, last *int) (*model.IssueConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssueInRepository", ctx, repoID, after, before, first, last)
	ret0, _ := ret[0].(*model.IssueConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssueInRepository indicates an expected call of ListIssueInRepository.
func (mr *MockIssueServiceMockRecorder) ListIssueInRepository(ctx, repoID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueInRepository", reflect.TypeOf((*MockIssueService)(nil).ListIssueInRepository), ctx, repoID, after, before, first, last)
}

// MockPullRequestService is a mock of PullRequestService interface.
type MockPullRequestService struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestServiceMockRecorder
}

// MockPullRequestServiceMockRecorder is the mock recorder for MockPullRequestService.
type MockPullRequestServiceMockRecorder struct {
	mock *MockPullRequestService
}

// NewMockPullRequestService creates a new mock instance.
func NewMockPullRequestService(ctrl *gomock.Controller) *MockPullRequestService {
	mock := &MockPullRequestService{ctrl: ctrl}
	mock.recorder = &MockPullRequestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestService) EXPECT() *MockPullRequestServiceMockRecorder {
	return m.recorder
}

// GetPullRequestByID mocks base method.
func (m *MockPullRequestService) GetPullRequestByID(ctx context.Context, id string) (*model.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestByID", ctx, id)
	ret0, _ := ret[0].(*model.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestByID indicates an expected call of GetPullRequestByID.
func (mr *MockPullRequestServiceMockRecorder) GetPullRequestByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestByID", reflect.TypeOf((*MockPullRequestService)(nil).GetPullRequestByID), ctx, id)
}

// GetPullRequestByRepoAndNumber mocks base method.
func (m *MockPullRequestService) GetPullRequestByRepoAndNumber(ctx context.Context, repoID string, number int) (*model.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestByRepoAndNumber", ctx, repoID, number)
	ret0, _ := ret[0].(*model.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestByRepoAndNumber indicates an expected call of GetPullRequestByRepoAndNumber.
func (mr *MockPullRequestServiceMockRecorder) GetPullRequestByRepoAndNumber(ctx, repoID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestByRepoAndNumber", reflect.TypeOf((*MockPullRequestService)(nil).GetPullRequestByRepoAndNumber), ctx, repoID, number)
}

// ListPullRequestInRepository mocks base method.
func (m *MockPullRequestService) ListPullRequestInRepository(ctx context.Context, repoID string, after, before *string, first, last *int) (*model.PullRequestConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestInRepository", ctx, repoID, after, before, first, last)
	ret0, _ := ret[0].(*model.PullRequestConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestInRepository indicates an expected call of ListPullRequestInRepository.
func (mr *MockPullRequestServiceMockRecorder) ListPullRequestInRepository(ctx, repoID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestInRepository", reflect.TypeOf((*MockPullRequestService)(nil).ListPullRequestInRepository), ctx, repoID, after, before, first, last)
}

// MockProjectService is a mock of ProjectService interface.
type MockProjectService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceMockRecorder
}

// MockProjectServiceMockRecorder is the mock recorder for MockProjectService.
type MockProjectServiceMockRecorder struct {
	mock *MockProjectService
}

// NewMockProjectService creates a new mock instance.
func NewMockProjectService(ctrl *gomock.Controller) *MockProjectService {
	mock := &MockProjectService{ctrl: ctrl}
	mock.recorder = &MockProjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectService) EXPECT() *MockProjectServiceMockRecorder {
	return m.recorder
}

// GetProjectByID mocks base method.
func (m *MockProjectService) GetProjectByID(ctx context.Context, id string) (*model.ProjectV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", ctx, id)
	ret0, _ := ret[0].(*model.ProjectV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockProjectServiceMockRecorder) GetProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockProjectService)(nil).GetProjectByID), ctx, id)
}

// GetProjectByOwnerAndNumber mocks base method.
func (m *MockProjectService) GetProjectByOwnerAndNumber(ctx context.Context, ownerID string, number int) (*model.ProjectV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByOwnerAndNumber", ctx, ownerID, number)
	ret0, _ := ret[0].(*model.ProjectV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByOwnerAndNumber indicates an expected call of GetProjectByOwnerAndNumber.
func (mr *MockProjectServiceMockRecorder) GetProjectByOwnerAndNumber(ctx, ownerID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByOwnerAndNumber", reflect.TypeOf((*MockProjectService)(nil).GetProjectByOwnerAndNumber), ctx, ownerID, number)
}

// ListProjectByOwner mocks base method.
func (m *MockProjectService) ListProjectByOwner(ctx context.Context, ownerID string, after, before *string, first, last *int) (*model.ProjectV2Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectByOwner", ctx, ownerID, after, before, first, last)
	ret0, _ := ret[0].(*model.ProjectV2Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectByOwner indicates an expected call of ListProjectByOwner.
func (mr *MockProjectServiceMockRecorder) ListProjectByOwner(ctx, ownerID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectByOwner", reflect.TypeOf((*MockProjectService)(nil).ListProjectByOwner), ctx, ownerID, after, before, first, last)
}

// MockProjectItemService is a mock of ProjectItemService interface.
type MockProjectItemService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectItemServiceMockRecorder
}

// MockProjectItemServiceMockRecorder is the mock recorder for MockProjectItemService.
type MockProjectItemServiceMockRecorder struct {
	mock *MockProjectItemService
}

// NewMockProjectItemService creates a new mock instance.
func NewMockProjectItemService(ctrl *gomock.Controller) *MockProjectItemService {
	mock := &MockProjectItemService{ctrl: ctrl}
	mock.recorder = &MockProjectItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectItemService) EXPECT() *MockProjectItemServiceMockRecorder {
	return m.recorder
}

// AddIssueInProjectV2 mocks base method.
func (m *MockProjectItemService) AddIssueInProjectV2(ctx context.Context, projectID, issueID string) (*model.ProjectV2Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIssueInProjectV2", ctx, projectID, issueID)
	ret0, _ := ret[0].(*model.ProjectV2Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddIssueInProjectV2 indicates an expected call of AddIssueInProjectV2.
func (mr *MockProjectItemServiceMockRecorder) AddIssueInProjectV2(ctx, projectID, issueID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIssueInProjectV2", reflect.TypeOf((*MockProjectItemService)(nil).AddIssueInProjectV2), ctx, projectID, issueID)
}

// AddPullRequestInProjectV2 mocks base method.
func (m *MockProjectItemService) AddPullRequestInProjectV2(ctx context.Context, projectID, pullRequestID string) (*model.ProjectV2Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPullRequestInProjectV2", ctx, projectID, pullRequestID)
	ret0, _ := ret[0].(*model.ProjectV2Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPullRequestInProjectV2 indicates an expected call of AddPullRequestInProjectV2.
func (mr *MockProjectItemServiceMockRecorder) AddPullRequestInProjectV2(ctx, projectID, pullRequestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPullRequestInProjectV2", reflect.TypeOf((*MockProjectItemService)(nil).AddPullRequestInProjectV2), ctx, projectID, pullRequestID)
}

// GetProjectItemByID mocks base method.
func (m *MockProjectItemService) GetProjectItemByID(ctx context.Context, id string) (*model.ProjectV2Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectItemByID", ctx, id)
	ret0, _ := ret[0].(*model.ProjectV2Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectItemByID indicates an expected call of GetProjectItemByID.
func (mr *MockProjectItemServiceMockRecorder) GetProjectItemByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectItemByID", reflect.TypeOf((*MockProjectItemService)(nil).GetProjectItemByID), ctx, id)
}

// ListProjectItemOwnedByIssue mocks base method.
func (m *MockProjectItemService) ListProjectItemOwnedByIssue(ctx context.Context, issueID string, after, before *string, first, last *int) (*model.ProjectV2ItemConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectItemOwnedByIssue", ctx, issueID, after, before, first, last)
	ret0, _ := ret[0].(*model.ProjectV2ItemConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectItemOwnedByIssue indicates an expected call of ListProjectItemOwnedByIssue.
func (mr *MockProjectItemServiceMockRecorder) ListProjectItemOwnedByIssue(ctx, issueID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectItemOwnedByIssue", reflect.TypeOf((*MockProjectItemService)(nil).ListProjectItemOwnedByIssue), ctx, issueID, after, before, first, last)
}

// ListProjectItemOwnedByProject mocks base method.
func (m *MockProjectItemService) ListProjectItemOwnedByProject(ctx context.Context, projectID string, after, before *string, first, last *int) (*model.ProjectV2ItemConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectItemOwnedByProject", ctx, projectID, after, before, first, last)
	ret0, _ := ret[0].(*model.ProjectV2ItemConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectItemOwnedByProject indicates an expected call of ListProjectItemOwnedByProject.
func (mr *MockProjectItemServiceMockRecorder) ListProjectItemOwnedByProject(ctx, projectID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectItemOwnedByProject", reflect.TypeOf((*MockProjectItemService)(nil).ListProjectItemOwnedByProject), ctx, projectID, after, before, first, last)
}

// ListProjectItemOwnedByPullRequest mocks base method.
func (m *MockProjectItemService) ListProjectItemOwnedByPullRequest(ctx context.Context, pullRequestID string, after, before *string, first, last *int) (*model.ProjectV2ItemConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectItemOwnedByPullRequest", ctx, pullRequestID, after, before, first, last)
	ret0, _ := ret[0].(*model.ProjectV2ItemConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectItemOwnedByPullRequest indicates an expected call of ListProjectItemOwnedByPullRequest.
func (mr *MockProjectItemServiceMockRecorder) ListProjectItemOwnedByPullRequest(ctx, pullRequestID, after, before, first, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectItemOwnedByPullRequest", reflect.TypeOf((*MockProjectItemService)(nil).ListProjectItemOwnedByPullRequest), ctx, pullRequestID, after, before, first, last)
}
