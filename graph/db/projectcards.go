// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Projectcard is an object representing the database table.
type Projectcard struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Project     string      `boil:"project" json:"project" toml:"project" yaml:"project"`
	Issue       null.String `boil:"issue" json:"issue,omitempty" toml:"issue" yaml:"issue,omitempty"`
	Pullrequest null.String `boil:"pullrequest" json:"pullrequest,omitempty" toml:"pullrequest" yaml:"pullrequest,omitempty"`

	R *projectcardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L projectcardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProjectcardColumns = struct {
	ID          string
	Project     string
	Issue       string
	Pullrequest string
}{
	ID:          "id",
	Project:     "project",
	Issue:       "issue",
	Pullrequest: "pullrequest",
}

var ProjectcardTableColumns = struct {
	ID          string
	Project     string
	Issue       string
	Pullrequest string
}{
	ID:          "projectcards.id",
	Project:     "projectcards.project",
	Issue:       "projectcards.issue",
	Pullrequest: "projectcards.pullrequest",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ProjectcardWhere = struct {
	ID          whereHelperstring
	Project     whereHelperstring
	Issue       whereHelpernull_String
	Pullrequest whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"projectcards\".\"id\""},
	Project:     whereHelperstring{field: "\"projectcards\".\"project\""},
	Issue:       whereHelpernull_String{field: "\"projectcards\".\"issue\""},
	Pullrequest: whereHelpernull_String{field: "\"projectcards\".\"pullrequest\""},
}

// ProjectcardRels is where relationship names are stored.
var ProjectcardRels = struct {
	ProjectcardPullrequest string
	ProjectcardIssue       string
	ProjectcardProject     string
}{
	ProjectcardPullrequest: "ProjectcardPullrequest",
	ProjectcardIssue:       "ProjectcardIssue",
	ProjectcardProject:     "ProjectcardProject",
}

// projectcardR is where relationships are stored.
type projectcardR struct {
	ProjectcardPullrequest *Pullrequest `boil:"ProjectcardPullrequest" json:"ProjectcardPullrequest" toml:"ProjectcardPullrequest" yaml:"ProjectcardPullrequest"`
	ProjectcardIssue       *Issue       `boil:"ProjectcardIssue" json:"ProjectcardIssue" toml:"ProjectcardIssue" yaml:"ProjectcardIssue"`
	ProjectcardProject     *Project     `boil:"ProjectcardProject" json:"ProjectcardProject" toml:"ProjectcardProject" yaml:"ProjectcardProject"`
}

// NewStruct creates a new relationship struct
func (*projectcardR) NewStruct() *projectcardR {
	return &projectcardR{}
}

func (r *projectcardR) GetProjectcardPullrequest() *Pullrequest {
	if r == nil {
		return nil
	}
	return r.ProjectcardPullrequest
}

func (r *projectcardR) GetProjectcardIssue() *Issue {
	if r == nil {
		return nil
	}
	return r.ProjectcardIssue
}

func (r *projectcardR) GetProjectcardProject() *Project {
	if r == nil {
		return nil
	}
	return r.ProjectcardProject
}

// projectcardL is where Load methods for each relationship are stored.
type projectcardL struct{}

var (
	projectcardAllColumns            = []string{"id", "project", "issue", "pullrequest"}
	projectcardColumnsWithoutDefault = []string{"id", "project"}
	projectcardColumnsWithDefault    = []string{"issue", "pullrequest"}
	projectcardPrimaryKeyColumns     = []string{"id"}
	projectcardGeneratedColumns      = []string{}
)

type (
	// ProjectcardSlice is an alias for a slice of pointers to Projectcard.
	// This should almost always be used instead of []Projectcard.
	ProjectcardSlice []*Projectcard
	// ProjectcardHook is the signature for custom Projectcard hook methods
	ProjectcardHook func(context.Context, boil.ContextExecutor, *Projectcard) error

	projectcardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	projectcardType                 = reflect.TypeOf(&Projectcard{})
	projectcardMapping              = queries.MakeStructMapping(projectcardType)
	projectcardPrimaryKeyMapping, _ = queries.BindMapping(projectcardType, projectcardMapping, projectcardPrimaryKeyColumns)
	projectcardInsertCacheMut       sync.RWMutex
	projectcardInsertCache          = make(map[string]insertCache)
	projectcardUpdateCacheMut       sync.RWMutex
	projectcardUpdateCache          = make(map[string]updateCache)
	projectcardUpsertCacheMut       sync.RWMutex
	projectcardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var projectcardAfterSelectHooks []ProjectcardHook

var projectcardBeforeInsertHooks []ProjectcardHook
var projectcardAfterInsertHooks []ProjectcardHook

var projectcardBeforeUpdateHooks []ProjectcardHook
var projectcardAfterUpdateHooks []ProjectcardHook

var projectcardBeforeDeleteHooks []ProjectcardHook
var projectcardAfterDeleteHooks []ProjectcardHook

var projectcardBeforeUpsertHooks []ProjectcardHook
var projectcardAfterUpsertHooks []ProjectcardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Projectcard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Projectcard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Projectcard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Projectcard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Projectcard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Projectcard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Projectcard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Projectcard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Projectcard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectcardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProjectcardHook registers your hook function for all future operations.
func AddProjectcardHook(hookPoint boil.HookPoint, projectcardHook ProjectcardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		projectcardAfterSelectHooks = append(projectcardAfterSelectHooks, projectcardHook)
	case boil.BeforeInsertHook:
		projectcardBeforeInsertHooks = append(projectcardBeforeInsertHooks, projectcardHook)
	case boil.AfterInsertHook:
		projectcardAfterInsertHooks = append(projectcardAfterInsertHooks, projectcardHook)
	case boil.BeforeUpdateHook:
		projectcardBeforeUpdateHooks = append(projectcardBeforeUpdateHooks, projectcardHook)
	case boil.AfterUpdateHook:
		projectcardAfterUpdateHooks = append(projectcardAfterUpdateHooks, projectcardHook)
	case boil.BeforeDeleteHook:
		projectcardBeforeDeleteHooks = append(projectcardBeforeDeleteHooks, projectcardHook)
	case boil.AfterDeleteHook:
		projectcardAfterDeleteHooks = append(projectcardAfterDeleteHooks, projectcardHook)
	case boil.BeforeUpsertHook:
		projectcardBeforeUpsertHooks = append(projectcardBeforeUpsertHooks, projectcardHook)
	case boil.AfterUpsertHook:
		projectcardAfterUpsertHooks = append(projectcardAfterUpsertHooks, projectcardHook)
	}
}

// One returns a single projectcard record from the query.
func (q projectcardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Projectcard, error) {
	o := &Projectcard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for projectcards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Projectcard records from the query.
func (q projectcardQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProjectcardSlice, error) {
	var o []*Projectcard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Projectcard slice")
	}

	if len(projectcardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Projectcard records in the query.
func (q projectcardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count projectcards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q projectcardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if projectcards exists")
	}

	return count > 0, nil
}

// ProjectcardPullrequest pointed to by the foreign key.
func (o *Projectcard) ProjectcardPullrequest(mods ...qm.QueryMod) pullrequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Pullrequest),
	}

	queryMods = append(queryMods, mods...)

	return Pullrequests(queryMods...)
}

// ProjectcardIssue pointed to by the foreign key.
func (o *Projectcard) ProjectcardIssue(mods ...qm.QueryMod) issueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Issue),
	}

	queryMods = append(queryMods, mods...)

	return Issues(queryMods...)
}

// ProjectcardProject pointed to by the foreign key.
func (o *Projectcard) ProjectcardProject(mods ...qm.QueryMod) projectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Project),
	}

	queryMods = append(queryMods, mods...)

	return Projects(queryMods...)
}

// LoadProjectcardPullrequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectcardL) LoadProjectcardPullrequest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectcard interface{}, mods queries.Applicator) error {
	var slice []*Projectcard
	var object *Projectcard

	if singular {
		var ok bool
		object, ok = maybeProjectcard.(*Projectcard)
		if !ok {
			object = new(Projectcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProjectcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProjectcard))
			}
		}
	} else {
		s, ok := maybeProjectcard.(*[]*Projectcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProjectcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProjectcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectcardR{}
		}
		if !queries.IsNil(object.Pullrequest) {
			args = append(args, object.Pullrequest)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectcardR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Pullrequest) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Pullrequest) {
				args = append(args, obj.Pullrequest)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pullrequests`),
		qm.WhereIn(`pullrequests.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pullrequest")
	}

	var resultSlice []*Pullrequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pullrequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pullrequests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pullrequests")
	}

	if len(pullrequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProjectcardPullrequest = foreign
		if foreign.R == nil {
			foreign.R = &pullrequestR{}
		}
		foreign.R.Projectcards = append(foreign.R.Projectcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Pullrequest, foreign.ID) {
				local.R.ProjectcardPullrequest = foreign
				if foreign.R == nil {
					foreign.R = &pullrequestR{}
				}
				foreign.R.Projectcards = append(foreign.R.Projectcards, local)
				break
			}
		}
	}

	return nil
}

// LoadProjectcardIssue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectcardL) LoadProjectcardIssue(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectcard interface{}, mods queries.Applicator) error {
	var slice []*Projectcard
	var object *Projectcard

	if singular {
		var ok bool
		object, ok = maybeProjectcard.(*Projectcard)
		if !ok {
			object = new(Projectcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProjectcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProjectcard))
			}
		}
	} else {
		s, ok := maybeProjectcard.(*[]*Projectcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProjectcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProjectcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectcardR{}
		}
		if !queries.IsNil(object.Issue) {
			args = append(args, object.Issue)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectcardR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Issue) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Issue) {
				args = append(args, obj.Issue)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`issues`),
		qm.WhereIn(`issues.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Issue")
	}

	var resultSlice []*Issue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Issue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for issues")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for issues")
	}

	if len(issueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProjectcardIssue = foreign
		if foreign.R == nil {
			foreign.R = &issueR{}
		}
		foreign.R.Projectcards = append(foreign.R.Projectcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Issue, foreign.ID) {
				local.R.ProjectcardIssue = foreign
				if foreign.R == nil {
					foreign.R = &issueR{}
				}
				foreign.R.Projectcards = append(foreign.R.Projectcards, local)
				break
			}
		}
	}

	return nil
}

// LoadProjectcardProject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (projectcardL) LoadProjectcardProject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProjectcard interface{}, mods queries.Applicator) error {
	var slice []*Projectcard
	var object *Projectcard

	if singular {
		var ok bool
		object, ok = maybeProjectcard.(*Projectcard)
		if !ok {
			object = new(Projectcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProjectcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProjectcard))
			}
		}
	} else {
		s, ok := maybeProjectcard.(*[]*Projectcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProjectcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProjectcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &projectcardR{}
		}
		args = append(args, object.Project)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &projectcardR{}
			}

			for _, a := range args {
				if a == obj.Project {
					continue Outer
				}
			}

			args = append(args, obj.Project)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`projects`),
		qm.WhereIn(`projects.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Project")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Project")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(projectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProjectcardProject = foreign
		if foreign.R == nil {
			foreign.R = &projectR{}
		}
		foreign.R.Projectcards = append(foreign.R.Projectcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Project == foreign.ID {
				local.R.ProjectcardProject = foreign
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Projectcards = append(foreign.R.Projectcards, local)
				break
			}
		}
	}

	return nil
}

// SetProjectcardPullrequest of the projectcard to the related item.
// Sets o.R.ProjectcardPullrequest to related.
// Adds o to related.R.Projectcards.
func (o *Projectcard) SetProjectcardPullrequest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pullrequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"projectcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"pullrequest"}),
		strmangle.WhereClause("\"", "\"", 0, projectcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Pullrequest, related.ID)
	if o.R == nil {
		o.R = &projectcardR{
			ProjectcardPullrequest: related,
		}
	} else {
		o.R.ProjectcardPullrequest = related
	}

	if related.R == nil {
		related.R = &pullrequestR{
			Projectcards: ProjectcardSlice{o},
		}
	} else {
		related.R.Projectcards = append(related.R.Projectcards, o)
	}

	return nil
}

// RemoveProjectcardPullrequest relationship.
// Sets o.R.ProjectcardPullrequest to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Projectcard) RemoveProjectcardPullrequest(ctx context.Context, exec boil.ContextExecutor, related *Pullrequest) error {
	var err error

	queries.SetScanner(&o.Pullrequest, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("pullrequest")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProjectcardPullrequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Projectcards {
		if queries.Equal(o.Pullrequest, ri.Pullrequest) {
			continue
		}

		ln := len(related.R.Projectcards)
		if ln > 1 && i < ln-1 {
			related.R.Projectcards[i] = related.R.Projectcards[ln-1]
		}
		related.R.Projectcards = related.R.Projectcards[:ln-1]
		break
	}
	return nil
}

// SetProjectcardIssue of the projectcard to the related item.
// Sets o.R.ProjectcardIssue to related.
// Adds o to related.R.Projectcards.
func (o *Projectcard) SetProjectcardIssue(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Issue) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"projectcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"issue"}),
		strmangle.WhereClause("\"", "\"", 0, projectcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Issue, related.ID)
	if o.R == nil {
		o.R = &projectcardR{
			ProjectcardIssue: related,
		}
	} else {
		o.R.ProjectcardIssue = related
	}

	if related.R == nil {
		related.R = &issueR{
			Projectcards: ProjectcardSlice{o},
		}
	} else {
		related.R.Projectcards = append(related.R.Projectcards, o)
	}

	return nil
}

// RemoveProjectcardIssue relationship.
// Sets o.R.ProjectcardIssue to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Projectcard) RemoveProjectcardIssue(ctx context.Context, exec boil.ContextExecutor, related *Issue) error {
	var err error

	queries.SetScanner(&o.Issue, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("issue")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProjectcardIssue = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Projectcards {
		if queries.Equal(o.Issue, ri.Issue) {
			continue
		}

		ln := len(related.R.Projectcards)
		if ln > 1 && i < ln-1 {
			related.R.Projectcards[i] = related.R.Projectcards[ln-1]
		}
		related.R.Projectcards = related.R.Projectcards[:ln-1]
		break
	}
	return nil
}

// SetProjectcardProject of the projectcard to the related item.
// Sets o.R.ProjectcardProject to related.
// Adds o to related.R.Projectcards.
func (o *Projectcard) SetProjectcardProject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Project) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"projectcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"project"}),
		strmangle.WhereClause("\"", "\"", 0, projectcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Project = related.ID
	if o.R == nil {
		o.R = &projectcardR{
			ProjectcardProject: related,
		}
	} else {
		o.R.ProjectcardProject = related
	}

	if related.R == nil {
		related.R = &projectR{
			Projectcards: ProjectcardSlice{o},
		}
	} else {
		related.R.Projectcards = append(related.R.Projectcards, o)
	}

	return nil
}

// Projectcards retrieves all the records using an executor.
func Projectcards(mods ...qm.QueryMod) projectcardQuery {
	mods = append(mods, qm.From("\"projectcards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"projectcards\".*"})
	}

	return projectcardQuery{q}
}

// FindProjectcard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProjectcard(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Projectcard, error) {
	projectcardObj := &Projectcard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"projectcards\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, projectcardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from projectcards")
	}

	if err = projectcardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return projectcardObj, err
	}

	return projectcardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Projectcard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no projectcards provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectcardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	projectcardInsertCacheMut.RLock()
	cache, cached := projectcardInsertCache[key]
	projectcardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			projectcardAllColumns,
			projectcardColumnsWithDefault,
			projectcardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(projectcardType, projectcardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(projectcardType, projectcardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"projectcards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"projectcards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into projectcards")
	}

	if !cached {
		projectcardInsertCacheMut.Lock()
		projectcardInsertCache[key] = cache
		projectcardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Projectcard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Projectcard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	projectcardUpdateCacheMut.RLock()
	cache, cached := projectcardUpdateCache[key]
	projectcardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			projectcardAllColumns,
			projectcardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update projectcards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"projectcards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, projectcardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(projectcardType, projectcardMapping, append(wl, projectcardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update projectcards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for projectcards")
	}

	if !cached {
		projectcardUpdateCacheMut.Lock()
		projectcardUpdateCache[key] = cache
		projectcardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q projectcardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for projectcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for projectcards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProjectcardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"projectcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectcardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in projectcard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all projectcard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Projectcard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no projectcards provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectcardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	projectcardUpsertCacheMut.RLock()
	cache, cached := projectcardUpsertCache[key]
	projectcardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			projectcardAllColumns,
			projectcardColumnsWithDefault,
			projectcardColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			projectcardAllColumns,
			projectcardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert projectcards, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(projectcardPrimaryKeyColumns))
			copy(conflict, projectcardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"projectcards\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(projectcardType, projectcardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(projectcardType, projectcardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert projectcards")
	}

	if !cached {
		projectcardUpsertCacheMut.Lock()
		projectcardUpsertCache[key] = cache
		projectcardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Projectcard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Projectcard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Projectcard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), projectcardPrimaryKeyMapping)
	sql := "DELETE FROM \"projectcards\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from projectcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for projectcards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q projectcardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no projectcardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from projectcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for projectcards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProjectcardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(projectcardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"projectcards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectcardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from projectcard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for projectcards")
	}

	if len(projectcardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Projectcard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProjectcard(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProjectcardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProjectcardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"projectcards\".* FROM \"projectcards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, projectcardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ProjectcardSlice")
	}

	*o = slice

	return nil
}

// ProjectcardExists checks if the Projectcard row exists.
func ProjectcardExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"projectcards\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if projectcards exists")
	}

	return exists, nil
}

// Exists checks if the Projectcard row exists.
func (o *Projectcard) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProjectcardExists(ctx, exec, o.ID)
}
