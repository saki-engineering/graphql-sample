// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Repository is an object representing the database table.
type Repository struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Owner     string    `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *repositoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L repositoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepositoryColumns = struct {
	ID        string
	Owner     string
	Name      string
	CreatedAt string
}{
	ID:        "id",
	Owner:     "owner",
	Name:      "name",
	CreatedAt: "created_at",
}

var RepositoryTableColumns = struct {
	ID        string
	Owner     string
	Name      string
	CreatedAt string
}{
	ID:        "repositories.id",
	Owner:     "repositories.owner",
	Name:      "repositories.name",
	CreatedAt: "repositories.created_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var RepositoryWhere = struct {
	ID        whereHelperstring
	Owner     whereHelperstring
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"repositories\".\"id\""},
	Owner:     whereHelperstring{field: "\"repositories\".\"owner\""},
	Name:      whereHelperstring{field: "\"repositories\".\"name\""},
	CreatedAt: whereHelpertime_Time{field: "\"repositories\".\"created_at\""},
}

// RepositoryRels is where relationship names are stored.
var RepositoryRels = struct {
	OwnerUser    string
	Issues       string
	Pullrequests string
}{
	OwnerUser:    "OwnerUser",
	Issues:       "Issues",
	Pullrequests: "Pullrequests",
}

// repositoryR is where relationships are stored.
type repositoryR struct {
	OwnerUser    *User            `boil:"OwnerUser" json:"OwnerUser" toml:"OwnerUser" yaml:"OwnerUser"`
	Issues       IssueSlice       `boil:"Issues" json:"Issues" toml:"Issues" yaml:"Issues"`
	Pullrequests PullrequestSlice `boil:"Pullrequests" json:"Pullrequests" toml:"Pullrequests" yaml:"Pullrequests"`
}

// NewStruct creates a new relationship struct
func (*repositoryR) NewStruct() *repositoryR {
	return &repositoryR{}
}

func (r *repositoryR) GetOwnerUser() *User {
	if r == nil {
		return nil
	}
	return r.OwnerUser
}

func (r *repositoryR) GetIssues() IssueSlice {
	if r == nil {
		return nil
	}
	return r.Issues
}

func (r *repositoryR) GetPullrequests() PullrequestSlice {
	if r == nil {
		return nil
	}
	return r.Pullrequests
}

// repositoryL is where Load methods for each relationship are stored.
type repositoryL struct{}

var (
	repositoryAllColumns            = []string{"id", "owner", "name", "created_at"}
	repositoryColumnsWithoutDefault = []string{"id", "owner", "name"}
	repositoryColumnsWithDefault    = []string{"created_at"}
	repositoryPrimaryKeyColumns     = []string{"id"}
	repositoryGeneratedColumns      = []string{}
)

type (
	// RepositorySlice is an alias for a slice of pointers to Repository.
	// This should almost always be used instead of []Repository.
	RepositorySlice []*Repository
	// RepositoryHook is the signature for custom Repository hook methods
	RepositoryHook func(context.Context, boil.ContextExecutor, *Repository) error

	repositoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repositoryType                 = reflect.TypeOf(&Repository{})
	repositoryMapping              = queries.MakeStructMapping(repositoryType)
	repositoryPrimaryKeyMapping, _ = queries.BindMapping(repositoryType, repositoryMapping, repositoryPrimaryKeyColumns)
	repositoryInsertCacheMut       sync.RWMutex
	repositoryInsertCache          = make(map[string]insertCache)
	repositoryUpdateCacheMut       sync.RWMutex
	repositoryUpdateCache          = make(map[string]updateCache)
	repositoryUpsertCacheMut       sync.RWMutex
	repositoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repositoryAfterSelectHooks []RepositoryHook

var repositoryBeforeInsertHooks []RepositoryHook
var repositoryAfterInsertHooks []RepositoryHook

var repositoryBeforeUpdateHooks []RepositoryHook
var repositoryAfterUpdateHooks []RepositoryHook

var repositoryBeforeDeleteHooks []RepositoryHook
var repositoryAfterDeleteHooks []RepositoryHook

var repositoryBeforeUpsertHooks []RepositoryHook
var repositoryAfterUpsertHooks []RepositoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Repository) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Repository) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Repository) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Repository) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Repository) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Repository) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Repository) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Repository) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Repository) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repositoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepositoryHook registers your hook function for all future operations.
func AddRepositoryHook(hookPoint boil.HookPoint, repositoryHook RepositoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repositoryAfterSelectHooks = append(repositoryAfterSelectHooks, repositoryHook)
	case boil.BeforeInsertHook:
		repositoryBeforeInsertHooks = append(repositoryBeforeInsertHooks, repositoryHook)
	case boil.AfterInsertHook:
		repositoryAfterInsertHooks = append(repositoryAfterInsertHooks, repositoryHook)
	case boil.BeforeUpdateHook:
		repositoryBeforeUpdateHooks = append(repositoryBeforeUpdateHooks, repositoryHook)
	case boil.AfterUpdateHook:
		repositoryAfterUpdateHooks = append(repositoryAfterUpdateHooks, repositoryHook)
	case boil.BeforeDeleteHook:
		repositoryBeforeDeleteHooks = append(repositoryBeforeDeleteHooks, repositoryHook)
	case boil.AfterDeleteHook:
		repositoryAfterDeleteHooks = append(repositoryAfterDeleteHooks, repositoryHook)
	case boil.BeforeUpsertHook:
		repositoryBeforeUpsertHooks = append(repositoryBeforeUpsertHooks, repositoryHook)
	case boil.AfterUpsertHook:
		repositoryAfterUpsertHooks = append(repositoryAfterUpsertHooks, repositoryHook)
	}
}

// OneG returns a single repository record from the query using the global executor.
func (q repositoryQuery) OneG(ctx context.Context) (*Repository, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single repository record from the query.
func (q repositoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Repository, error) {
	o := &Repository{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for repositories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Repository records from the query using the global executor.
func (q repositoryQuery) AllG(ctx context.Context) (RepositorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Repository records from the query.
func (q repositoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (RepositorySlice, error) {
	var o []*Repository

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Repository slice")
	}

	if len(repositoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Repository records in the query using the global executor
func (q repositoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Repository records in the query.
func (q repositoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count repositories rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q repositoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q repositoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if repositories exists")
	}

	return count > 0, nil
}

// OwnerUser pointed to by the foreign key.
func (o *Repository) OwnerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Owner),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Issues retrieves all the issue's Issues with an executor.
func (o *Repository) Issues(mods ...qm.QueryMod) issueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"issues\".\"repository\"=?", o.ID),
	)

	return Issues(queryMods...)
}

// Pullrequests retrieves all the pullrequest's Pullrequests with an executor.
func (o *Repository) Pullrequests(mods ...qm.QueryMod) pullrequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pullrequests\".\"repository\"=?", o.ID),
	)

	return Pullrequests(queryMods...)
}

// LoadOwnerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repositoryL) LoadOwnerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		var ok bool
		object, ok = maybeRepository.(*Repository)
		if !ok {
			object = new(Repository)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepository))
			}
		}
	} else {
		s, ok := maybeRepository.(*[]*Repository)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepository))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.Owner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if a == obj.Owner {
					continue Outer
				}
			}

			args = append(args, obj.Owner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerRepositories = append(foreign.R.OwnerRepositories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Owner == foreign.ID {
				local.R.OwnerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerRepositories = append(foreign.R.OwnerRepositories, local)
				break
			}
		}
	}

	return nil
}

// LoadIssues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repositoryL) LoadIssues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		var ok bool
		object, ok = maybeRepository.(*Repository)
		if !ok {
			object = new(Repository)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepository))
			}
		}
	} else {
		s, ok := maybeRepository.(*[]*Repository)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepository))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`issues`),
		qm.WhereIn(`issues.repository in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load issues")
	}

	var resultSlice []*Issue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice issues")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on issues")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for issues")
	}

	if len(issueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Issues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &issueR{}
			}
			foreign.R.IssueRepository = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Repository {
				local.R.Issues = append(local.R.Issues, foreign)
				if foreign.R == nil {
					foreign.R = &issueR{}
				}
				foreign.R.IssueRepository = local
				break
			}
		}
	}

	return nil
}

// LoadPullrequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repositoryL) LoadPullrequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepository interface{}, mods queries.Applicator) error {
	var slice []*Repository
	var object *Repository

	if singular {
		var ok bool
		object, ok = maybeRepository.(*Repository)
		if !ok {
			object = new(Repository)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepository))
			}
		}
	} else {
		s, ok := maybeRepository.(*[]*Repository)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepository)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepository))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repositoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repositoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pullrequests`),
		qm.WhereIn(`pullrequests.repository in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pullrequests")
	}

	var resultSlice []*Pullrequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pullrequests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pullrequests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pullrequests")
	}

	if len(pullrequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Pullrequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pullrequestR{}
			}
			foreign.R.PullrequestRepository = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Repository {
				local.R.Pullrequests = append(local.R.Pullrequests, foreign)
				if foreign.R == nil {
					foreign.R = &pullrequestR{}
				}
				foreign.R.PullrequestRepository = local
				break
			}
		}
	}

	return nil
}

// SetOwnerUserG of the repository to the related item.
// Sets o.R.OwnerUser to related.
// Adds o to related.R.OwnerRepositories.
// Uses the global database handle.
func (o *Repository) SetOwnerUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetOwnerUser(ctx, boil.GetContextDB(), insert, related)
}

// SetOwnerUser of the repository to the related item.
// Sets o.R.OwnerUser to related.
// Adds o to related.R.OwnerRepositories.
func (o *Repository) SetOwnerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"repositories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"owner"}),
		strmangle.WhereClause("\"", "\"", 0, repositoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Owner = related.ID
	if o.R == nil {
		o.R = &repositoryR{
			OwnerUser: related,
		}
	} else {
		o.R.OwnerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerRepositories: RepositorySlice{o},
		}
	} else {
		related.R.OwnerRepositories = append(related.R.OwnerRepositories, o)
	}

	return nil
}

// AddIssuesG adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Issues.
// Sets related.R.IssueRepository appropriately.
// Uses the global database handle.
func (o *Repository) AddIssuesG(ctx context.Context, insert bool, related ...*Issue) error {
	return o.AddIssues(ctx, boil.GetContextDB(), insert, related...)
}

// AddIssues adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Issues.
// Sets related.R.IssueRepository appropriately.
func (o *Repository) AddIssues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Issue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Repository = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"issues\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"repository"}),
				strmangle.WhereClause("\"", "\"", 0, issuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Repository = o.ID
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			Issues: related,
		}
	} else {
		o.R.Issues = append(o.R.Issues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &issueR{
				IssueRepository: o,
			}
		} else {
			rel.R.IssueRepository = o
		}
	}
	return nil
}

// AddPullrequestsG adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Pullrequests.
// Sets related.R.PullrequestRepository appropriately.
// Uses the global database handle.
func (o *Repository) AddPullrequestsG(ctx context.Context, insert bool, related ...*Pullrequest) error {
	return o.AddPullrequests(ctx, boil.GetContextDB(), insert, related...)
}

// AddPullrequests adds the given related objects to the existing relationships
// of the repository, optionally inserting them as new records.
// Appends related to o.R.Pullrequests.
// Sets related.R.PullrequestRepository appropriately.
func (o *Repository) AddPullrequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pullrequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Repository = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pullrequests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"repository"}),
				strmangle.WhereClause("\"", "\"", 0, pullrequestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Repository = o.ID
		}
	}

	if o.R == nil {
		o.R = &repositoryR{
			Pullrequests: related,
		}
	} else {
		o.R.Pullrequests = append(o.R.Pullrequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pullrequestR{
				PullrequestRepository: o,
			}
		} else {
			rel.R.PullrequestRepository = o
		}
	}
	return nil
}

// Repositories retrieves all the records using an executor.
func Repositories(mods ...qm.QueryMod) repositoryQuery {
	mods = append(mods, qm.From("\"repositories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"repositories\".*"})
	}

	return repositoryQuery{q}
}

// FindRepositoryG retrieves a single record by ID.
func FindRepositoryG(ctx context.Context, iD string, selectCols ...string) (*Repository, error) {
	return FindRepository(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRepository retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepository(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Repository, error) {
	repositoryObj := &Repository{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"repositories\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, repositoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from repositories")
	}

	if err = repositoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return repositoryObj, err
	}

	return repositoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Repository) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Repository) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no repositories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repositoryInsertCacheMut.RLock()
	cache, cached := repositoryInsertCache[key]
	repositoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repositoryAllColumns,
			repositoryColumnsWithDefault,
			repositoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repositoryType, repositoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"repositories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"repositories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into repositories")
	}

	if !cached {
		repositoryInsertCacheMut.Lock()
		repositoryInsertCache[key] = cache
		repositoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Repository record using the global executor.
// See Update for more documentation.
func (o *Repository) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Repository.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Repository) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repositoryUpdateCacheMut.RLock()
	cache, cached := repositoryUpdateCache[key]
	repositoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repositoryAllColumns,
			repositoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update repositories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"repositories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, repositoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, append(wl, repositoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update repositories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for repositories")
	}

	if !cached {
		repositoryUpdateCacheMut.Lock()
		repositoryUpdateCache[key] = cache
		repositoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q repositoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q repositoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for repositories")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RepositorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepositorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"repositories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in repository slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all repository")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Repository) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Repository) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no repositories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repositoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repositoryUpsertCacheMut.RLock()
	cache, cached := repositoryUpsertCache[key]
	repositoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			repositoryAllColumns,
			repositoryColumnsWithDefault,
			repositoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			repositoryAllColumns,
			repositoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert repositories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(repositoryPrimaryKeyColumns))
			copy(conflict, repositoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"repositories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(repositoryType, repositoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repositoryType, repositoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert repositories")
	}

	if !cached {
		repositoryUpsertCacheMut.Lock()
		repositoryUpsertCache[key] = cache
		repositoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Repository record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Repository) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Repository record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Repository) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Repository provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repositoryPrimaryKeyMapping)
	sql := "DELETE FROM \"repositories\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for repositories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q repositoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q repositoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no repositoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from repositories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for repositories")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RepositorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepositorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repositoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"repositories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from repository slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for repositories")
	}

	if len(repositoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Repository) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("db: no Repository provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Repository) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRepository(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepositorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("db: empty RepositorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepositorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepositorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repositoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"repositories\".* FROM \"repositories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repositoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in RepositorySlice")
	}

	*o = slice

	return nil
}

// RepositoryExistsG checks if the Repository row exists.
func RepositoryExistsG(ctx context.Context, iD string) (bool, error) {
	return RepositoryExists(ctx, boil.GetContextDB(), iD)
}

// RepositoryExists checks if the Repository row exists.
func RepositoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"repositories\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if repositories exists")
	}

	return exists, nil
}

// Exists checks if the Repository row exists.
func (o *Repository) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RepositoryExists(ctx, exec, o.ID)
}
